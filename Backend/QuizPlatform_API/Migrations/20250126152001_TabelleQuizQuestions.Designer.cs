// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QuizPlatform_API.Models;

#nullable disable

namespace QuizPlatform_API.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20250126152001_TabelleQuizQuestions")]
    partial class TabelleQuizQuestions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QuizPlatform_API.Models.Highscore", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("NumberOfQuestions")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_questions");

                    b.Property<long>("QuizId")
                        .HasColumnType("bigint")
                        .HasColumnName("quiz_id");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("Highscore_pkey");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("highscore", (string)null);
                });

            modelBuilder.Entity("QuizPlatform_API.Models.Quiz", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("Quiz_pkey");

                    b.HasIndex("CategoryId");

                    b.ToTable("quiz", (string)null);
                });

            modelBuilder.Entity("QuizPlatform_API.Models.QuizCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("QuizCategory_pkey");

                    b.ToTable("quiz_category", (string)null);
                });

            modelBuilder.Entity("QuizPlatform_API.Models.QuizQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AnswerFalseOne")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("answer_false_one");

                    b.Property<string>("AnswerFalseThree")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("answer_false_three");

                    b.Property<string>("AnswerFalseTwo")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("answer_false_two");

                    b.Property<string>("AnswerTrue")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("answer_true");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("question");

                    b.Property<long>("QuizId")
                        .HasColumnType("bigint")
                        .HasColumnName("quiz_id");

                    b.HasKey("Id")
                        .HasName("QuizQuestion_pkey");

                    b.HasIndex("QuizId");

                    b.ToTable("quiz_questions", (string)null);
                });

            modelBuilder.Entity("QuizPlatform_API.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("password_hash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("User_pkey");

                    b.HasIndex(new[] { "Username" }, "user_username_key")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("QuizPlatform_API.Models.Highscore", b =>
                {
                    b.HasOne("QuizPlatform_API.Models.Quiz", "QuizNavigation")
                        .WithMany("Highscores")
                        .HasForeignKey("QuizId")
                        .IsRequired()
                        .HasConstraintName("highscore_quiz_fkey");

                    b.HasOne("QuizPlatform_API.Models.User", "UserNavigation")
                        .WithMany("Highscores")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("highscore_user_fkey");

                    b.Navigation("QuizNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("QuizPlatform_API.Models.Quiz", b =>
                {
                    b.HasOne("QuizPlatform_API.Models.QuizCategory", "Category")
                        .WithMany("Quizzes")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("quiz_category_fkey");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("QuizPlatform_API.Models.QuizQuestion", b =>
                {
                    b.HasOne("QuizPlatform_API.Models.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("quiz_question_quiz_fkey");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizPlatform_API.Models.Quiz", b =>
                {
                    b.Navigation("Highscores");

                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizPlatform_API.Models.QuizCategory", b =>
                {
                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("QuizPlatform_API.Models.User", b =>
                {
                    b.Navigation("Highscores");
                });
#pragma warning restore 612, 618
        }
    }
}
